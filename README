___________      .__        __            ___________      .__                      .__          
\__    ___/______|__| ____ |  | _____.__. \__    ___/______|__|____    ____    ____ |  |   ____  
  |    |  \_  __ \  |/ ___\|  |/ <   |  |   |    |  \_  __ \  \__  \  /    \  / ___\|  | _/ __ \ 
  |    |   |  | \/  \  \___|    < \___  |   |    |   |  | \/  |/ __ \|   |  \/ /_/  >  |_\  ___/ 
  |____|   |__|  |__|\___  >__|_ \/ ____|   |____|   |__|  |__(____  /___|  /\___  /|____/\___  >
                         \/     \/\/                               \/     \//_____/           \/ 


# Purpose

The goal of our project was to prove that the tricky triangle
(http://www.termstech.com/images/TrickyTriangle/TrickyTriangleGame.jpg)
is solvable from every starting state.

## Game Mechanics

The goal of the game is to have 1 peg left on the board. The player repeatedly
makes moves until they can no longer make moves. If there is only 1 peg on the
board at this time, we say that the player has won. Otherwise the player has
lost.

During each move, the player selects 1 pin to jump over an adjacent pin into an
empty space. The player then removes the pin that was jumped over. Pins can jump
verically, horizontally, or diagonally

## Terminology

We call an initial board state a starting state. In every starting state, all
of the holes, except for one, contain pins. We say that the starting state is
solvable if there is some series of moves that will allow a player to win. Our
goal is to show that for boards of size 5 (15 holes, 14 initial pegs), every
starting state is possible. Note that the starting state (0,0) denotes the board
with a hole in at coordinate (0,0)

# Program Overview

## run_tests.py

This program is the way to run our tests. 

./run_tests.py <SIZE>

attempts to solve every possible starting state of size SIZE. It then prints
coordinates followed by the boolean that represents if that starting state has
a solution.

Ej. (0, 0): 1

would show that coordinate 0, 0 has a solution while

(0, 0): 0

would indicate that the starting state (0, 0) has no solution.

The script parses the user's input and then runs the script compile. Based on
the output from compile, the program can determine whether the board was
solvable from that starting state. It uses regex to parse this input and
displays it in a user-friendly manner.

## compile

./compile <SIZE> <X> <Y>

This compiles and starts running our spin program, while passing the input size
and coordinates for the empty hole.

This is a simple bash script with compiles tt.pml to solve for a single starting
state. It does this by means of passing precompiler flags to spin, where LEN is
the size of the triangle, X is the starting hole's X coordinate, and Y is the
starting hole's Y coordinate

## tt.pml

This is the spin program which solves a board given a starting state and length.
It generates a board, and nondeterministically chooses moves. It then asserts
that none of the branching moves ever reach a winning state for the board (the
state in which there is only 1 pin left). If this assert fails, the board is
of course solvable. Otherwise it is not.

## Representation

In order to represent our board state within our spin program, we shifted the
holes so that they create a right triangle, and labeled each hole with
coordinates.

Ej. The top hole is (0, 4) in a board of size 5, the bottom left hole is (0,
0) and the bottom right hole is (4, 0).

Note that technically this right triangle is then represented in the lower left
half of a 2D array.

### FINDINGS
We have shown that all starting states of a triangle of size 5 are indeed
solvable. Furthermore, we showed some interesting properties of other sizes:

All triangles of size less than or equal to 3 are completely unsolvable from
all starting states

All starting states of size 4 are solvable, except for the corners and middle
holes.

All starting states of size 6 are solvable
All starting states of size 8 are solvable

We could not prove that certain states in size 7 were _not_ solvable, as we
didn't have enough memory. We did, however, show that the following states
_are_ solvable:
(0,1)
(0,2)
(0,4)
(0,5)
(1,0)
(1,2)
(1,3)
(1,5)
(2,0)
(2,1)
(2,3)
(2,4)
(3,1)
(3,2)
(4,0)
(4,2)
(5,0)
(5,1)

We suspect that the others aren't, as they seem to follow the general pattern
present in the triangle of size 4
